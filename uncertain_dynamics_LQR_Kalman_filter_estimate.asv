% A simple code for simulation of linear dynamic systems in State space format


%Time Step
dt=0.01; 
%Simulation final time
T=20;
% Time Vector
Time=[0:dt:T]; 


% Continous time state space representation of the system

A = zeros)

B = [ 0.0073         0
     -0.4750    0.0077
      0.1530    0.1430
           0         0];

C = [0     1     0     0
     0     0     0     1];

D = [0     0
     0     0];

% Initial condition of the system
x=[1;1;1;1];
u=[0;0];



%{
A=[0	1	0	0;...
0	-0.100000000000000	3	0;...
0	0	0	1;...
0	-0.500000000000000	30	0];

B=[0;2;0;5];

C=[1	0	0	0;...
0	0	1	0];


x=[1;1;1;1];
u=[0];
%}
% Number of states (nn), inputs (mm) and measurment sensors(rr)

nn=size(A,1);
mm=size(B,2);
rr=size(C,1);


% Discrete system with first order Euler discretization method
Ad=(A)*dt+eye(nn,nn);
Bd=B*dt;


%Place holder for saving states and measurments
X=[];
Y=[];
X_REAL=[];

mu_model_uncertainty=0.00;
sigma_model_uncertainty=0.001;


mu_measurment_uncertainty=0;
sigma_measurment_uncertainty=0.01;

% Model uncertainty covariance
Q = sigma_model_uncertainty*eye(nn);

% Measurement noise covariance
R = sigma_measurment_uncertainty*eye(rr);


P = [1 0 0 0; 0 1 0 0; 0 0 1 0; 0 0 0 1];

[Kd,S,e] = dlqr(Ad,Bd,Q,R);
x_prev=x;
P_prev=P;
x_real=x;
% Simulation loop
for i=0:dt:T

system_uncrtainty=normrnd(mu_model_uncertainty,sigma_model_uncertainty,size(mm,1));
measurement_noise=normrnd(mu_measurment_uncertainty,sigma_measurment_uncertainty,size(rr,1));

% Controller 
u=-Kd*x_prev;

x_real=Ad*x_real+Bd*u;
y=C*x_prev+measurement_noise;
[x_est, P_est]=kalman_filter(y, x_prev, u,P_prev, Ad, Bd, C, Q, R);
x_prev=x_est;
P_prev=P_est;
x_real_prev=x_real;

X=[X x_est];
Y=[Y y];
X_REAL=[X_REAL x_real];

end

%Plot the states
plot(Time,X')
xlabel("Time")
ylabel("States")
% Plot the measurments
hold on


hold on 
plot(Time,X_REAL',"--")

figure
plot(Time,Y')
xlabel("Measurments")
ylabel("Time")




function [x_est, P_est] = kalman_filter(y, x_prev, u,P_prev, Ad, Bd, C, Q, R)
    % Prediction step
    x_est = Ad * x_prev + Bd*u;
    P_est = Ad * P_prev * Ad' + Q;
    
    % Update step
    K = P_est * C' / (C * P_est * C' + R);
    x_est = x_est + K * (y - C * x_est);
    P_est = (eye(size(Ad)) - K * C) * P_est;
end



function cost=JJ(u)

for i=1:Np

    %x = xlim*dt*
    cost=cost+(x_estimate-y);
end
end